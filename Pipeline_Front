pipeline {
    agent any
    stages {
        // ... (Stage: Declarative: Tool Install remains the same) ...

        stage('Checkout') {
            steps {
                cleanWs()
                script {
                    withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_TOKEN')]) {
                        sh 'git config --global credential.helper store'
                        sh "git config --global url.\"https://$GIT_USERNAME:$GIT_TOKEN@github.com\".insteadOf \"https://github.com\""
                        checkout scm
                    }
                }
            }
        }
        stage('Install Front-End Dependencies') {
            steps {
                script {
                    dir('HPE_CDS-Front/Front-End') {
                        sh 'npm install'
                    }
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    dir('HPE_CDS-Front/Front-End') {
                        echo "Verificando el contenido de karma.conf.js en el workspace de Jenkins..."
                        sh 'cat karma.conf.js'
                        echo "Fin de la verificaci√≥n de karma.conf.js."

                        withEnv(["CHROME_BIN=/usr/bin/google-chrome"]) {
                            sh 'npm test'
                        }
                    }
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    dir('HPE_CDS-Front/Front-End') {
                        withSonarQubeEnv('sonar-server') {
                            sh 'npm install -g sonarqube-scanner'
                            sh 'sonar-scanner -Dsonar.sources=src -Dsonar.exclusions=src/environments/**,src/app/**/*.spec.ts -Dsonar.tests=src -Dsonar.test.inclusions=src/**/*.spec.ts -Dsonar.javascript.lcov.reportPaths=coverage/its-app-frontend/lcov.info -Dsonar.testExecutionReportPaths=test-results.xml'
                        }
                    }
                }
            }
        }
        stage('Build Front-End') {
            steps {
                script {
                    dir('HPE_CDS-Front/Front-End') {
                        sh 'npm run build -- --configuration production'
                    }
                }
            }
        }
        stage('Build Back-End') {
            steps {
                script {
                    dir('HPE_CDS-Front/Back-End') {
                        sh 'mvn clean install -DskipTests'
                    }
                }
            }
        }
        stage('Build Docker Images') {
            steps {
                script {
                    dir('HPE_CDS-Front') {
                        sh 'docker build -f dockerfile.jenkins -t entregar-jenkins .'
                    }
                    dir('HPE_CDS-Front/Front-End') {
                        sh 'docker build -t frontend-app .'
                    }
                    dir('HPE_CDS-Front/Back-End') {
                        sh 'docker build -t backend-app .'
                    }
                }
            }
        }
        stage('Push Docker Images') {
            steps {
                script {
                    sh 'docker push frontend-app'
                    sh 'docker push backend-app'
                }
            }
        }
        stage('Deploy with Docker Compose') {
            steps {
                script {
                    dir('HPE_CDS-Front') {
                        sh 'docker-compose down'
                        sh 'docker-compose up -d'
                    }
                }
            }
        }
    }
}