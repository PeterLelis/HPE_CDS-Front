pipeline {
    agent any
    environment {
        DEPLOY_ENV = 'production'
        NODE_VERSION = '16.x'
        DOCKER_IMAGE_NAME = 'mi-frontend'
        DOCKER_TAG = 'latest'
        DOCKER_REGISTRY = 'localhost:8083'
        REPO_NAME = 'HPE_CDS-Front'
        FRONTEND_DIR = "${REPO_NAME}/Front-End"
        BACKEND_DIR = "${REPO_NAME}/Back-End"
        SONARQUBE_URL = 'http://localhost:9000'
        SONAR_SCANNER_PATH = '/var/jenkins_home/tools/hudson.plugins.sonar.SonarRunnerInstallation/SonarQubeScanner/bin/sonar-scanner'
    }
    tools {
        nodejs 'NodeJS'
        jdk 'jdk21'
    }
    stages {
        stage('Checkout') {
            steps {
                cleanWs(deleteDirs: true) // Limpia directorios completamente
                script {
                    // Primero, clonar el repositorio
                    withCredentials([usernamePassword(credentialsId: 'CredGit', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                        git branch: 'main', credentialsId: 'CredGit', url: "https://github.com/PeterLelis/HPE_CDS-Front.git"
                    }
                    // Después de clonar, verificar el contenido del workspace de Jenkins
                    echo "Listando contenido de /var/jenkins_home/workspace/Front/..."
                    sh 'ls -F /var/jenkins_home/workspace/Front/' // Debería mostrar HPE_CDS-Front/
                    echo "Fin listado."
                }
            }
        }
        stage('Verificar Jenkinsfile y Directorios') { // Etapa de diagnóstico ampliada
            steps {
                script {
                    dir("${REPO_NAME}") { // Asegurarse de entrar al directorio clonado
                        echo "Contenido del Jenkinsfile que Jenkins está leyendo dentro de ${REPO_NAME}:"
                        sh 'cat Jenkinsfile'
                        echo "Fin del contenido del Jenkinsfile."

                        echo "Contenido del directorio clonado (${REPO_NAME}):"
                        sh 'ls -F'
                        echo "Contenido de ${FRONTEND_DIR}:"
                        sh "ls -F ${FRONTEND_DIR}"
                    }
                }
            }
        }
        stage('Instalar Dependencias Frontend') {
            steps {
                script {
                    dir("${FRONTEND_DIR}") {
                        echo "Cambiando directorio a ${FRONTEND_DIR} para instalar dependencias..."
                        sh "pwd" // Confirmar la ruta actual
                        sh "ls -F" // Listar archivos en la ruta actual
                        sh "npm cache clean --force"
                        sh "npm install --legacy-peer-deps"
                        sh "npm audit fix || true"
                    }
                }
            }
        }
        stage('Build Frontend') {
            steps {
                script {
                    dir("${FRONTEND_DIR}") {
                        echo "Cambiando directorio a ${FRONTEND_DIR} para build..."
                        sh "pwd"
                        sh "ls -F"
                        sh "npm run build:production"
                    }
                }
            }
        }
        stage('Test Frontend') {
            steps {
                script {
                    dir("${FRONTEND_DIR}") {
                        echo "Cambiando directorio a ${FRONTEND_DIR} para tests..."
                        sh "pwd"
                        echo "Verificando el contenido de karma.conf.js en el workspace de Jenkins (${FRONTEND_DIR})..."
                        sh 'cat karma.conf.js'
                        echo "Fin de la verificación de karma.conf.js."

                        withEnv(["CHROME_BIN=/usr/bin/google-chrome"]) {
                            sh 'npm test'
                        }
                    }
                }
            }
        }
        stage('SonarQube Analysis Frontend') {
            steps {
                script {
                    dir("${REPO_NAME}") {
                        withCredentials([string(credentialsId: 'CredSonar', variable: 'SONAR_TOKEN')]) {
                            sh """
                                ${SONAR_SCANNER_PATH} \\
                                -Dsonar.projectKey=hps-cds-frontend \\
                                -Dsonar.sources=${FRONTEND_DIR}/src \\
                                -Dsonar.javascript.lcov.reportPaths=${FRONTEND_DIR}/coverage/lcov.info \\
                                -Dsonar.testExecutionReportPaths=${FRONTEND_DIR}/report.xml \\
                                -Dsonar.host.url=${SONARQUBE_URL} \\
                                -Dsonar.login=\${SONAR_TOKEN}
                            """
                        }
                    }
                }
            }
        }
        stage('Instalar Dependencias Backend') {
            steps {
                script {
                    dir("${BACKEND_DIR}") {
                        sh 'mvn clean install -DskipTests'
                    }
                }
            }
        }
        stage('Construir Imagen Frontend Docker') {
            steps {
                script {
                    def dockerfilePath = "${FRONTEND_DIR}/Dockerfile"
                    if (fileExists(dockerfilePath)) {
                        withCredentials([usernamePassword(credentialsId: 'CredNexus', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                            sh """
                                docker login -u ${NEXUS_USERNAME} -p ${NEXUS_PASSWORD} ${DOCKER_REGISTRY}
                                docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG} -f ${dockerfilePath} ${FRONTEND_DIR}
                            """
                        }
                    } else {
                        error "No se encontró el Dockerfile en ${dockerfilePath}"
                    }
                }
            }
        }
        stage('Subir Imagen Frontend Docker') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'CredNexus', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                    sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
                }
            }
        }
        stage('Desplegar con Docker Compose') {
            steps {
                script {
                    dir("${REPO_NAME}") {
                        def composeFile = 'docker-compose.yml'
                        if (fileExists(composeFile)) {
                            sh """
                                docker-compose -f ${composeFile} up -d ${DOCKER_IMAGE_NAME}
                            """
                        } else {
                            error "No se encontró el archivo docker-compose.yml en ${REPO_NAME}"
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            echo '¡Pipeline de Frontend finalizado con éxito!'
        }
        failure {
            echo '¡Pipeline de Frontend fallido!'
        }
    }
}